# -*- coding: utf-8 -*-
"""DEMO_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o-NJxhuoBf6BVMt_T2gdCPWcXAHnbIig

**DEMO Prediction**
"""

from google.colab import drive
drive.mount("/content/drive")

from transformers import TextClassificationPipeline
import json
from sklearn.preprocessing import MultiLabelBinarizer
from transformers import (
    BertTokenizer, BertForSequenceClassification,
    TrainingArguments, Trainer, TrainerCallback, EvalPrediction
    )

# 讀取 mlb_classes JSON檔
with open("/content/drive/MyDrive/Colab Notebooks/test/mlb_classes.json", "r", encoding="utf-8") as f:
    classes_list = json.load(f)

# 建立新的 MultiLabelBinarizer 並指定 classes
mlb = MultiLabelBinarizer(classes=classes_list)
mlb.classes_ = classes_list  # 明確指定 classes_ 屬性
print(mlb.classes_)
# print(len(mlb.classes_))

# load pretrained model and tokenizer
persist_model_path = "/content/drive/MyDrive/Colab Notebooks/test/model_saved_0517"
model = BertForSequenceClassification.from_pretrained(f"{persist_model_path}")
tokenizer = BertTokenizer.from_pretrained("hfl/chinese-roberta-wwm-ext")

pipe = TextClassificationPipeline(model=model, tokenizer=tokenizer, return_all_scores=True)

while True:
    # request a console input the replace the hardcoded text
    print("請輸入要分類的索取資料題目:")
    user_input = input().strip()

    if not user_input:
        print("請輸入有效的索取資料題目")
        exit(1)

    predict_result = pipe(user_input)
    # find the top 3 scores in predict_result[0]
    top_three_score_result = sorted(predict_result[0], key=lambda x: x['score'], reverse=True)[:3]
    # convert the label to the original valid_labels
    top_three_score_result = [
        {
            "label": label['label'],
            "score": label['score'],
            "label_name": mlb.classes_[int(label['label'].replace("LABEL_", ""))] if label['label'].startswith("LABEL_") else label['label']
        }
        for label in top_three_score_result
    ]

    # print the top 3 scores and label_name
    for label in top_three_score_result:
        print(f"Label: {label['label_name']}, Score: {label['score']:.4f}")

user_input = "三、部分民眾尚未了解鄰里公園禁止騎乘自行車之相關規定,雖鄰里公園已移交區公所,公園處仍可提供協助,俾利管理。"
predict_result = pipe(user_input)
predict_result[0][1]

"""*儲存mlb.classes_*"""

import pandas as pd
import ast
from sklearn.preprocessing import MultiLabelBinarizer
from transformers import BertTokenizer, BertForSequenceClassification

grouped = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/test/merged_data_0517.csv", converters={"new_label": ast.literal_eval})

print(grouped.head())
print(grouped['new_label'].shape)

mlb = MultiLabelBinarizer()
y = mlb.fit_transform(grouped['new_label'])
print('mlb shape:', y.shape)

print(type(grouped["new_label"].iloc[0]))

print(mlb.classes_)
print(mlb.classes_.shape)

import json

#儲存mlb, 固定當時訓練時的label順序

classes_list = mlb.classes_.tolist()

with open("/content/drive/MyDrive/Colab Notebooks/test/mlb_classes.json", "w", encoding="utf-8") as f:
    json.dump(classes_list, f, ensure_ascii=False, indent=2)